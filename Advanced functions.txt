Create tables and thier fields according to the queries below and write a queries for below points.

1. Write a query to calculate the running total of sales_amount for each salesperson in the sales table, ordered by sale_date.

mysql> select id, salesperson, sales_amount, sum(sales_amount) over (partition by salesperson order by sales_date) as running_total from sales;
+----+-------------+--------------+---------------+
| id | salesperson | sales_amount | running_total |
+----+-------------+--------------+---------------+
|  1 | Alice       |       100.00 |        100.00 |
|  3 | Alice       |       200.00 |        300.00 |
|  5 | Alice       |       300.00 |        600.00 |
|  2 | Bob         |       150.00 |        150.00 |
|  4 | Bob         |       250.00 |        400.00 |
|  6 | Bob         |       350.00 |        750.00 |
+----+-------------+--------------+---------------+
6 rows in set (0.00 sec)

2. Write a query to find the rank of each employee based on their salary within their department using the RANK() function.

mysql> select id, employee_name, salary, rank() over (order by salary desc) as salary_rank from employees;
+----+--------------------+----------+-------------+
| id | employee_name      | salary   | salary_rank |
+----+--------------------+----------+-------------+
|  5 | Jessica Wilson     | 92000.00 |           1 |
|  8 | James Martinez     | 85000.00 |           2 |
|  4 | Michael Brown      | 82000.00 |           3 |
| 10 | Christopher Thomas | 79000.00 |           4 |
|  2 | Jane Doe           | 75000.00 |           5 |
|  9 | Elizabeth Anderson | 71000.00 |           6 |
|  6 | David Johnson      | 68000.00 |           7 |
|  1 | John Smith         | 60000.00 |           8 |
|  7 | Sarah Taylor       | 54000.00 |           9 |
|  3 | Emily Davis        | 50000.00 |          10 |
+----+--------------------+----------+-------------+
10 rows in set (0.00 sec)

3. Write a query to calculate the moving average of order_amount for the last 3 orders for each customer using the AVG() function with the ROWS clause.

mysql> select id, name, order_id, order_amount, avg(order_amount) over (partition by name order by order_date rows between 2 preceding and current row) as moving_avg from customers;
+----+-------------------+----------+--------------+------------+
| id | name              | order_id | order_amount | moving_avg |
+----+-------------------+----------+--------------+------------+
| 10 | Christopher Moore |      110 |       600.00 | 600.000000 |
| 20 | Christopher Moore |      120 |       610.00 | 605.000000 |
|  6 | David Jones       |      106 |       200.00 | 200.000000 |
| 16 | David Jones       |      116 |       210.00 | 205.000000 |
|  9 | Elizabeth Wilson  |      109 |       550.00 | 550.000000 |
| 19 | Elizabeth Wilson  |      119 |       560.00 | 555.000000 |
|  3 | Emily Johnson     |      103 |       150.00 | 150.000000 |
| 13 | Emily Johnson     |      113 |       160.00 | 155.000000 |
|  8 | James Davis       |      108 |       500.00 | 500.000000 |
| 18 | James Davis       |      118 |       510.00 | 505.000000 |
|  2 | Jane Smith        |      102 |       300.00 | 300.000000 |
| 12 | Jane Smith        |      112 |       310.00 | 305.000000 |
|  5 | Jessica Williams  |      105 |       350.00 | 350.000000 |
| 15 | Jessica Williams  |      115 |       360.00 | 355.000000 |
|  1 | John Doe          |      101 |       250.00 | 250.000000 |
| 11 | John Doe          |      111 |       260.00 | 255.000000 |
|  4 | Michael Brown     |      104 |       400.00 | 400.000000 |
| 14 | Michael Brown     |      114 |       410.00 | 405.000000 |
|  7 | Sarah Miller      |      107 |       450.00 | 450.000000 |
| 17 | Sarah Miller      |      117 |       460.00 | 455.000000 |
+----+-------------------+----------+--------------+------------+
20 rows in set (0.00 sec)

4. Write a query to extract the value associated with the key "name" from a JSON column profile in the users table.
mysql> select id, name, json_extract(json, '$.name') from users;
+----+-------------------+------------------------------+
| id | name              | json_extract(json, '$.name') |
+----+-------------------+------------------------------+
|  1 | John Doe          | "John Doe"                   |
|  2 | Jane Smith        | "Jane Smith"                 |
|  3 | Emily Johnson     | "Emily Johnson"              |
|  4 | Michael Brown     | "Michael Brown"              |
|  5 | Jessica Wilson    | "Jessica Wilson"             |
|  6 | David Jones       | "David Jones"                |
|  7 | Sarah Miller      | "Sarah Miller"               |
|  8 | James Davis       | "James Davis"                |
|  9 | Elizabeth Wilson  | "Elizabeth Wilson"           |
| 10 | Christopher Moore | "Christopher Moore"          |
+----+-------------------+------------------------------+
10 rows in set (0.00 sec)

5. Write a query to update the profile JSON column in the users table by setting the "age" key to 30 for a specific user.
mysql> select json_set(json, '$.age', 32) from users where id = 1;
+----------------------------------------------------------------+
| json_set(json, '$.age', 32)                                    |
+----------------------------------------------------------------+
| {"age": 32, "name": "John Doe", "email": "john.doe@gmail.com"} |
+----------------------------------------------------------------+
1 row in set (0.01 sec)

6. Write a query to check if the profile JSON column in the users table contains the key "address".
mysql> select json_contains_path(json, 'one', '$.address') as has_address from users;
+-------------+
| has_address |
+-------------+
|           0 |
|           0 |
|           0 |
|           0 |
|           0 |
|           0 |
|           0 |
|           0 |
|           0 |
|           0 |
+-------------+
10 rows in set (0.00 sec)

7. Write a query to get all keys in the JSON column profile from the users table.
mysql> select id, name, json_keys(json) from users;
+----+-------------------+--------------------------+
| id | name              | json_keys(json)          |
+----+-------------------+--------------------------+
|  1 | John Doe          | ["age", "name", "email"] |
|  2 | Jane Smith        | ["age", "name", "email"] |
|  3 | Emily Johnson     | ["age", "name", "email"] |
|  4 | Michael Brown     | ["age", "name", "email"] |
|  5 | Jessica Wilson    | ["age", "name", "email"] |
|  6 | David Jones       | ["age", "name", "email"] |
|  7 | Sarah Miller      | ["age", "name", "email"] |
|  8 | James Davis       | ["age", "name", "email"] |
|  9 | Elizabeth Wilson  | ["age", "name", "email"] |
| 10 | Christopher Moore | ["age", "name", "email"] |
+----+-------------------+--------------------------+
10 rows in set (0.01 sec)

8. Write a query to find the position of the last occurrence of the character @ in the email column in the contacts table.

mysql> select name, locate('@', email, (select locate(',', email))) as last_occurence from contacts;
+-------------------+----------------+
| name              | last_occurence |
+-------------------+----------------+
| John Doe          |             29 |
| Jane Smith        |             33 |
| Emily Johnson     |             39 |
| Michael Brown     |             39 |
| Jessica Williams  |             45 |
| David Jones       |             35 |
| Sarah Miller      |             37 |
| James Davis       |             35 |
| Elizabeth Wilson  |             45 |
| Christopher Moore |             47 |
+-------------------+----------------+
10 rows in set (0.00 sec)

9. Write a query to split a comma-separated string in the tags column of the posts table into rows.
mysql> SELECT
    ->     id,
    ->     title,
    ->     jt.tag
    -> FROM
    ->     posts,
    ->     JSON_TABLE(
    ->         CONCAT('["', REPLACE(tags, ',', '","'), '"]'),
    ->         '$[*]' COLUMNS (
    ->             tag VARCHAR(255) PATH '$'
    ->         )
    ->     ) AS jt;
+----+-------------+-----------------+
| id | title       | tag             |
+----+-------------+-----------------+
|  1 | First Post  | mysql           |
|  1 | First Post  | sql             |
|  1 | First Post  | database        |
|  2 | Second Post | programming     |
|  2 | Second Post | python          |
|  2 | Second Post | coding          |
|  3 | Third Post  | web development |
|  3 | Third Post  | html            |
|  3 | Third Post  | css             |
|  3 | Third Post  | javascript      |
+----+-------------+-----------------+
10 rows in set (0.01 sec)

10. Write a query to concatenate values from the first_name and last_name columns in the employees table into a full name, with a comma separating them.

mysql> select concat_ws(',', first_name, last_name) as full_name from employees;
+--------------------+
| full_name          |
+--------------------+
| John,Smith         |
| Jane,Doe           |
| Emily,Davis        |
| Michael,Brown      |
| Jessica,Wilson     |
| David,Johnson      |
| Sarah,Taylor       |
| James,Martinez     |
| Elizabeth,Anderson |
| Christopher,Thomas |
+--------------------+
10 rows in set (0.00 sec)

11. Write a query to extract the domain part of the email addresses (everything after @) from the email column in the users table.

mysql> select id, name, substring_index(email, '@', -1) as domain from users;
+----+-------------------+----------------+
| id | name              | domain         |
+----+-------------------+----------------+
|  1 | John Doe          | gmail.com      |
|  2 | Jane Smith        | yahoo.com      |
|  3 | Emily Johnson     | hotmail.com    |
|  4 | Michael Brown     | outlook.com    |
|  5 | Jessica Wilson    | icloud.com     |
|  6 | David Jones       | protonmail.com |
|  7 | Sarah Miller      | mail.com       |
|  8 | James Davis       | aol.com        |
|  9 | Elizabeth Wilson  | zoho.com       |
| 10 | Christopher Moore | gmx.com        |
+----+-------------------+----------------+
10 rows in set (0.00 sec)

12. Write a query to calculate the age of a person based on their birthdate column in the employees table.
mysql> select id, first_name, year(curdate()) - year(birthdate) as age from employees;
+----+-------------+------+
| id | first_name  | age  |
+----+-------------+------+
|  1 | John        |   39 |
|  2 | Jane        |   44 |
|  3 | Emily       |   34 |
|  4 | Michael     |   42 |
|  5 | Jessica     |   46 |
|  6 | David       |   37 |
|  7 | Sarah       |   32 |
|  8 | James       |   40 |
|  9 | Elizabeth   |   33 |
| 10 | Christopher |   41 |
+----+-------------+------+
10 rows in set (0.00 sec)

13. Write a query to find the first day of the current year.
mysql> select makedate(year(curdate()), 1);
+------------------------------+
| makedate(year(curdate()), 1) |
+------------------------------+
| 2024-01-01                   |
+------------------------------+
1 row in set (0.00 sec)
 
14. Write a query to calculate the number of working days between two dates, excluding weekends (Saturday and Sunday).
mysql> select (datediff('2024-12-31', '2024-12-01') + 1) - (datediff('2024-12-31', '2024-12-01') + 1) div 7 * 2 as working_days;
+--------------+
| working_days |
+--------------+
|           23 |
+--------------+
1 row in set (0.00 sec)

explanation -
(datediff('2024-12-31', '2024-12-01') + 1) = to calculate total number of days
(datediff('2024-12-31', '2024-12-01') + 1) div 7 =  to calculate weeks as each week will be counted as one Sunday
(datediff('2024-12-31', '2024-12-01') + 1) div 7 * 2 = to count weekends